/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#define DEF 0
#define SYM 1
#define NAV 2
#define SET 3
#define FUN 4

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/ {
	combos {
		compatible = "zmk,combos";
		combo_lpar {
		    timeout-ms = <50>;
		    key-positions = <3 13>;
		    bindings = <&kp LPAR>;
		    layers = <DEF>;
		};

		combo_rpar {
		    timeout-ms = <50>;
		    key-positions = <6 16>;
		    bindings = <&kp RPAR>;
		    layers = <DEF>;
		};

		combo_lbrc {
		    timeout-ms = <50>;
		    key-positions = <2 12>;
		    bindings = <&kp LBRC>;
		    layers = <DEF>;
		};

		combo_rbrc {
		    timeout-ms = <50>;
		    key-positions = <7 17>;
		    bindings = <&kp RBRC>;
		    layers = <DEF>;
		};

		combo_lbkt {
		    timeout-ms = <50>;
		    key-positions = <1 11>;
		    bindings = <&kp LBKT>;
		    layers = <DEF>;
		};

		combo_rbkt {
		    timeout-ms = <50>;
		    key-positions = <8 18>;
		    bindings = <&kp RBKT>;
		    layers = <DEF>;
		};

		combo_minus {
		    timeout-ms = <50>;
		    key-positions = <0 10>;
		    bindings = <&kp MINUS>;
		    layers = <DEF>;
		};

		combo_equal {
		    timeout-ms = <50>;
		    key-positions = <9 19>;
		    bindings = <&kp EQUAL>;
		    layers = <DEF>;
		};

		combo_backslash {
		    timeout-ms = <50>;
		    key-positions = <5 15>;
		    bindings = <&kp BSLH>;
		    layers = <DEF>;
		};

		combo_close_tab {
		    timeout-ms = <50>;
		    key-positions = <10 11>;
		    bindings = <&kp LC(W)>;
		    layers = <NAV>;
		};

		combo_reopen_tab {
		    timeout-ms = <50>;
		    key-positions = <11 12>;
		    bindings = <&kp LC(LS(T))>;
		    layers = <NAV>;
		};

		combo_open_tab {
		    timeout-ms = <50>;
		    key-positions = <12 13>;
		    bindings = <&kp LC(T)>;
		    layers = <NAV>;
		};

		combo_select_all {
		    timeout-ms = <50>;
		    key-positions = <2 4>;
		    bindings = <&kp LC(A)>;
		    layers = <NAV>;
		};

		combo_setting {
		    timeout-ms = <50>;
		    key-positions = <30 35>;
		    bindings = <&mo SET>;
		};

		combo_f10 {
		    timeout-ms = <100>;
		    key-positions = <19 26>;
		    bindings = <&kp F10>;
		    layers = <FUN>;
		};

		combo_f12 {
		    timeout-ms = <100>;
		    key-positions = <26 27>;
		    bindings = <&kp F12>;
		    layers = <FUN>;
		};

		combo_f13 {
		    timeout-ms = <100>;
		    key-positions = <26 28>;
		    bindings = <&kp F13>;
		    layers = <FUN>;
		};

		combo_f14 {
		    timeout-ms = <100>;
		    key-positions = <16 26>;
		    bindings = <&kp F14>;
		    layers = <FUN>;
		};

		combo_f15 {
		    timeout-ms = <100>;
		    key-positions = <17 26>;
		    bindings = <&kp F15>;
		    layers = <FUN>;
		};

		combo_f16 {
		    timeout-ms = <100>;
		    key-positions = <18 26>;
		    bindings = <&kp F16>;
		    layers = <FUN>;
		};


		combo_f17 {
		    timeout-ms = <100>;
		    key-positions = <6 26>;
		    bindings = <&kp F17>;
		    layers = <FUN>;
		};

		combo_f18 {
		    timeout-ms = <100>;
		    key-positions = <7 26>;
		    bindings = <&kp F18>;
		    layers = <FUN>;
		};

		combo_f19 {
		    timeout-ms = <100>;
		    key-positions = <8 26>;
		    bindings = <&kp F19>;
		    layers = <FUN>;
		};

		combo_f20 {
		    timeout-ms = <100>;
		    key-positions = <19 27>;
		    bindings = <&kp F20>;
		    layers = <FUN>;
		};

		combo_f21 {
		    timeout-ms = <100>;
		    key-positions = <26 27>;
		    bindings = <&kp F21>;
		    layers = <FUN>;
		};

		combo_f23 {
		    timeout-ms = <100>;
		    key-positions = <27 28>;
		    bindings = <&kp F23>;
		    layers = <FUN>;
		};

		combo_f24 {
		    timeout-ms = <100>;
		    key-positions = <16 27>;
		    bindings = <&kp F24>;
		    layers = <FUN>;
		};
	    };
	behaviors {
		   skq: sticky_key_quick_release {
						  compatible = "zmk,behavior-sticky-key";
						  label = "STICKY_KEY_QUICK_RELEASE";
						  #binding-cells = <1>;
						  bindings = <&kp>;
						  release-after-ms = <1000>;
						  quick-release;
						  ignore-modifiers;
						 };
		   td0: tap_dance_0 {
				     compatible = "zmk,behavior-tap-dance";
				     label = "TAP_DANCE_0";
				     #binding-cells = <0>;
				     tapping-term-ms = <200>;
				     bindings = <&skq LSHFT>, <&caps_word>;
				    };
		   td1: tap_dance_1 {
				     compatible = "zmk,behavior-tap-dance";
				     label = "TAP_DANCE_1";
				     #binding-cells = <0>;
				     tapping-term-ms = <200>;
				     bindings = <&kp LGUI>, <&sk LGUI>;
				    };   
		   tdf1: tap_dance_f1 {
				     compatible = "zmk,behavior-tap-dance";
				     label = "TAP_DANCE_F1";
				     #binding-cells = <0>;
				     tapping-term-ms = <200>;
				     bindings = <&kp F1>, <&kp F11>;
				    };
		   tdf2: tap_dance_f2 {
				     compatible = "zmk,behavior-tap-dance";
				     label = "TAP_DANCE_F2";
				     #binding-cells = <0>;
				     tapping-term-ms = <200>;
				     bindings = <&kp F2>, <&kp F22>;
				    };
		   tdr: tap_dance_r {
				     compatible = "zmk,behavior-tap-dance";
				     label = "TAP_DANCE_R";
				     #binding-cells = <0>;
				     tapping-term-ms = <200>;
				     bindings = <&sys_reset>, <&bootloader>;
				    };
		  };
	macros {
        	dot_com_enter: dot_com_enter {
            				label = "ZM_dot_com_enter";
            				compatible = "zmk,behavior-macro";
            				#binding-cells = <0>;
            				bindings
                				= <&kp DOT &kp C &kp O &kp M &kp RET>
						;
					};
    		};
	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
				&kp SEMI	&kp W	     &kp F	     &kp P	  &kp B	      &kp Q     &kp L	  &kp U     &kp Y     &kp APOS
				&kp R		&kp S	     &kp T	     &kp H	  &kp K	      &kp J     &kp N	  &kp A     &kp I     &kp O
				&kp X		&kp C	     &kp G	     &kp D	  &kp V	      &kp Z     &kp M	  &kp COMMA &kp DOT   &kp SLASH
				        	&mo NAV      &kp SPC	     &td0	  &key_repeat &kp E	&mo SYM
			>;
		};

		sym_layer {
			bindings = <
				&kp GRAVE	&kp AMPS     &kp CARET	     &kp PRCNT	  &none	      &none	&kp N7	  &kp N8    &kp N9    &none
				&kp PLUS	&kp MINUS    &kp STAR        &kp SLASH	  &kp DLLR    &kp DOT	&kp N4	  &kp N5    &kp N6    &kp N0
				&kp TILDE	&kp HASH     &kp AT    	     &kp EXCL	  &none	      &none	&kp N1	  &kp N2    &kp N3    &sl FUN
				        	&none	     &kp ENTER	     &none	  &none	      &none	&trans
			>;
		};
		nav_layer {
			bindings = <
				&kp LC(Y)       &kp LC(Z)    &kp LC(C)	   &kp LC(V)	 &kp LC(X)   &kp ESC	    &kp PG_UP    &kp PG_DN     &kp HOME  &kp END
				&kp LA(LS(TAB)) &kp LA(TAB)  &kp LC(PG_UP) &kp LC(PG_DN) &kp LC(F)   &kp TAB	    &kp UP	 &kp DOWN      &kp LEFT	 &kp RIGHT
				&kp LA(F4)      &td1	     &sk LALT	   &sk LCTRL	 &kp LSHFT   &dot_com_enter &kp LC(PLUS) &kp LC(MINUS) &kp K_APP &kp LG(LS(S))
				                &trans       &none         &none         &kp BSPC    &kp ENTER	    &kp DEL
			>;
		};
		set_layer {
			bindings = <
				&none		&kp C_PREV   &kp C_RW	   &kp C_PP	 &none	     &none	    &kp C_STOP	 &kp C_FF      &kp C_NEXT &none
				&kp C_BRI_DN    &kp C_BRI_UP &kp C_VOL_DN  &kp C_VOL_UP	 &kp C_MUTE  &bt BT_CLR	    &bt BT_SEL 0 &bt BT_SEL 1  &none	  &out OUT_TOG
				&none		&none	     &none	   &none	 &tdr	     &tdr	    &none	 &none	       &none	  &none
				                &trans	     &none         &none	 &none       &none	    &trans
			>;
		};
		fun_layer {
			bindings = <
				&none		&none	     &none	   &none	 &none	     &none	    &kp F7	 &kp F8	       &kp F9    &none	
				&none		&none	     &none	   &none	 &none	     &none	    &kp F4	 &kp F5	       &kp F6    &none
				&none		&none	     &none	   &none	 &none	     &none	    &tdf1	 &tdf2	       &kp F3    &none
				                &none	     &none         &none	 &none       &none	    &none
			>;
		};

	};
};
